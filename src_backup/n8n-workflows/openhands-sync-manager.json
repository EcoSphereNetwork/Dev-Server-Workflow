{
  "name": "OpenHands-Sync-Manager",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 15,
              "unit": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "sync-trigger"
    },
    {
      "parameters": {
        "functionCode": "// Function to sync all OpenHands instances with each other\nconst instances = $getNodeParameter('instances');\nconst results = [];\n\n// Create a map to hold issues from all instances\nconst allIssuesByRef = new Map();\n\n// First, fetch all issues from all instances\nfor (const instance of instances) {\n  try {\n    // Get issues from this instance\n    const response = await fetch(`${instance.url}/api/issues?include_linked=true`, {\n      headers: {\n        'Authorization': `Bearer ${instance.apiKey}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    const data = await response.json();\n    \n    // Process each issue\n    for (const issue of data.issues) {\n      // Create a reference key\n      const refKey = `${instance.id}:${issue.id}`;\n      \n      // Store issue with instance info\n      allIssuesByRef.set(refKey, {\n        ...issue,\n        instance_id: instance.id,\n        instance_name: instance.name,\n        instance_url: instance.url\n      });\n      \n      // Track any linked issues\n      if (issue.linked_issues) {\n        for (const link of issue.linked_issues) {\n          if (link.link_type === 'openhands_issue') {\n            // Extract instance and issue IDs from the link URL\n            const match = link.url.match(/https:\\/\\/(oh\\d+)\\.ecospherenet\\.work\\/issues\\/(\\d+)/);\n            if (match) {\n              const linkedInstanceId = match[1];\n              const linkedIssueId = match[2];\n              \n              // Store this linkage\n              results.push({\n                source_instance: instance.id,\n                source_issue: issue.id,\n                target_instance: linkedInstanceId,\n                target_issue: linkedIssueId,\n                needs_sync: false  // We'll determine this next\n              });\n            }\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(`Error fetching from ${instance.name}: ${error.message}`);\n  }\n}\n\n// Now determine which issues need syncing\nfor (const link of results) {\n  const sourceKey = `${link.source_instance}:${link.source_issue}`;\n  const targetKey = `${link.target_instance}:${link.target_issue}`;\n  \n  const sourceIssue = allIssuesByRef.get(sourceKey);\n  const targetIssue = allIssuesByRef.get(targetKey);\n  \n  // If we have both issues, check if they need to be synced\n  if (sourceIssue && targetIssue) {\n    const sourceUpdated = new Date(sourceIssue.updated_at);\n    const targetUpdated = new Date(targetIssue.updated_at);\n    \n    // If source is newer than target, it needs syncing\n    if (sourceUpdated > targetUpdated) {\n      link.needs_sync = true;\n      link.source_data = sourceIssue;\n      link.target_data = targetIssue;\n    }\n  }\n}\n\n// Filter to only issues that need syncing\nconst syncNeeded = results.filter(link => link.needs_sync);\n\n// Return the results\nreturn syncNeeded.map(link => ({ json: link }));"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [440, 300],
      "id": "identify-sync-needs"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [640, 300],
      "id": "split-sync-tasks"
    },
    {
      "parameters": {
        "url": "={{ $json.target_data.instance_url }}/api/issues/{{ $json.target_issue }}/sync",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "=Bearer {{ $getNodeParameter('instances').find(i => i.id === $json.target_instance).apiKey }}"
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": $json.source_data.title,\n  \"description\": $json.source_data.description + '\\n\\n*Synced from ' + $json.source_data.instance_name + '*',\n  \"status\": $json.source_data.status,\n  \"labels\": $json.source_data.labels,\n  \"priority\": $json.source_data.priority,\n  \"sync_source\": {\n    \"instance\": $json.source_instance,\n    \"issue_id\": $json.source_issue,\n    \"updated_at\": $json.source_data.updated_at\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [840, 300],
      "id": "sync-issue"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1040, 300],
      "id": "check-sync-success"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook/send-notification",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"notification_type\": \"slack\",\n  \"channel\": \"#openhands-sync\",\n  \"subject\": \"OpenHands Sync Success\",\n  \"message\": \"Successfully synced issue #\" + $json.source_issue + \" from \" + $json.source_data.instance_name + \" to \" + $json.target_data.instance_name,\n  \"color\": \"#36a64f\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1240, 200],
      "id": "notify-success"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook/send-notification",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"notification_type\": \"slack\",\n  \"channel\": \"#openhands-sync\",\n  \"subject\": \"OpenHands Sync Failed\",\n  \"message\": \"Failed to sync issue #\" + $json.source_issue + \" from \" + $json.source_data.instance_name + \" to \" + $json.target_data.instance_name + \"\\n\\nError: \" + ($json.response ? JSON.stringify($json.response) : \"Unknown error\"),\n  \"color\": \"#ff0000\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1240, 400],
      "id": "notify-failure"
    }
  ],
  "connections": {
    "sync-trigger": {
      "main": [
        [
          {
            "node": "identify-sync-needs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "identify-sync-needs": {
      "main": [
        [
          {
            "node": "split-sync-tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split-sync-tasks": {
      "main": [
        [
          {
            "node": "sync-issue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sync-issue": {
      "main": [
        [
          {
            "node": "check-sync-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-sync-success": {
      "main": [
        [
          {
            "node": "notify-success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "notify-failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  }
}
