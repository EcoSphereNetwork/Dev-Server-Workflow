{
  "name": "Improved-Integration-Hub",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "event",
        "options": {
          "responseMode": "responseNode"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "integration-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Log incoming event\nconsole.log('Received event:', $json);\n\n// Normalize event data\nlet normalizedEvent = {\n  id: $json.id || $json.event_id || `event-${Date.now()}`,\n  timestamp: $json.timestamp || new Date().toISOString(),\n  source_type: $json.source_type || 'unknown',\n  source_id: $json.source_id || $json.id || '',\n  event_type: $json.event_type || $json.type || 'unknown',\n  title: $json.title || $json.name || 'Unnamed Event',\n  description: $json.description || $json.body || $json.message || '',\n  status: $json.status || 'active',\n  priority: $json.priority || 'normal',\n  assignee: $json.assignee || $json.assigned_to || '',\n  labels: $json.labels || $json.tags || [],\n  url: $json.url || $json.html_url || '',\n  raw_data: $json\n};\n\n// Add source-specific fields\nswitch(normalizedEvent.source_type) {\n  case 'github':\n    normalizedEvent.repository = $json.repository?.full_name || '';\n    normalizedEvent.branch = $json.branch || $json.ref?.replace('refs/heads/', '') || 'main';\n    break;\n  case 'gitlab':\n    normalizedEvent.project_id = $json.project_id || $json.project?.id || '';\n    normalizedEvent.branch = $json.branch || $json.ref?.replace('refs/heads/', '') || 'main';\n    break;\n  case 'openproject':\n    normalizedEvent.project_id = $json.project?.id || '';\n    normalizedEvent.work_package_id = $json.work_package?.id || $json.id || '';\n    break;\n  case 'appflowy':\n    normalizedEvent.database_id = $json.database_id || '';\n    normalizedEvent.record_id = $json.record_id || $json.id || '';\n    break;\n  case 'mcp_server':\n    normalizedEvent.server_name = $json.server_name || '';\n    normalizedEvent.components = $json.components || [];\n    normalizedEvent.severity = $json.severity || 'info';\n    break;\n  case 'openhands':\n    normalizedEvent.agent_id = $json.agent_id || '';\n    normalizedEvent.task_id = $json.task_id || '';\n    normalizedEvent.action = $json.action || '';\n    break;\n}\n\nreturn normalizedEvent;"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "normalize-event"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.source_type }}",
              "operation": "equal",
              "value2": "github"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "route-by-source"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/github-to-openproject",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 100],
      "id": "trigger-github-workflow"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/gitlab-to-openproject",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 240],
      "id": "trigger-gitlab-workflow"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/openproject-to-appflowy",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 380],
      "id": "trigger-openproject-workflow"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/appflowy-to-openproject",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 520],
      "id": "trigger-appflowy-workflow"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/mcp-to-openproject",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 660],
      "id": "trigger-mcp-workflow"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/openhands-to-{{ $json.source_type === 'github' ? 'github' : $json.source_type === 'gitlab' ? 'gitlab' : 'openproject' }}",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 800],
      "id": "trigger-openhands-workflow"
    },
    {
      "parameters": {
        "functionCode": "// Log event routing\nconst sourceType = $json.source_type;\nconst eventType = $json.event_type;\n\nconsole.log(`Routing event from ${sourceType} of type ${eventType}`);\n\n// Determine which workflows should be triggered\nconst workflows = [];\n\n// Add standard workflow based on source type\nif (sourceType === 'github') {\n  workflows.push('github-to-openproject');\n} else if (sourceType === 'gitlab') {\n  workflows.push('gitlab-to-openproject');\n} else if (sourceType === 'openproject') {\n  workflows.push('openproject-to-appflowy');\n} else if (sourceType === 'appflowy') {\n  workflows.push('appflowy-to-openproject');\n} else if (sourceType === 'mcp_server') {\n  workflows.push('mcp-to-openproject');\n} else if (sourceType === 'openhands') {\n  // Determine which OpenHands workflow to trigger based on the action\n  const action = $json.action || '';\n  if (action.includes('github')) {\n    workflows.push('openhands-to-github');\n  } else if (action.includes('gitlab')) {\n    workflows.push('openhands-to-gitlab');\n  } else {\n    workflows.push('openhands-to-openproject');\n  }\n}\n\n// Add special workflows based on event type\nif (eventType === 'code_review_requested') {\n  workflows.push('openhands-code-review');\n} else if (eventType === 'documentation_updated') {\n  workflows.push('sync-documentation');\n} else if (eventType === 'error' || eventType === 'warning') {\n  workflows.push('notification-service');\n}\n\nreturn {\n  ...($json),\n  workflows_to_trigger: workflows\n};"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300],
      "id": "determine-additional-workflows"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.event_type }}",
              "operation": "equal",
              "value2": "code_review_requested"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 300],
      "id": "check-special-events"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/openhands-code-review",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1560, 200],
      "id": "trigger-code-review"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.event_type }}",
              "operation": "equal",
              "value2": "documentation_updated"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 400],
      "id": "check-documentation-event"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/sync-documentation",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1780, 300],
      "id": "trigger-documentation-sync"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ ['error', 'warning'].includes($json.event_type) || $json.severity === 'error' || $json.severity === 'warning' }}",
              "operation": "equal",
              "value2": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1780, 500],
      "id": "check-notification-needed"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/notification-service",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ $json }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [2000, 400],
      "id": "trigger-notification"
    },
    {
      "parameters": {
        "functionCode": "// Log workflow completion\nconsole.log('Integration hub workflow completed for event:', $json.id);\n\n// Return a success response\nreturn {\n  success: true,\n  message: `Event processed successfully: ${$json.id}`,\n  source_type: $json.source_type,\n  event_type: $json.event_type,\n  workflows_triggered: $json.workflows_to_trigger || [],\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2220, 300],
      "id": "prepare-response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2440, 300],
      "id": "send-response"
    }
  ],
  "connections": {
    "integration-webhook": {
      "main": [
        [
          {
            "node": "normalize-event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize-event": {
      "main": [
        [
          {
            "node": "route-by-source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "route-by-source": {
      "main": [
        [
          {
            "node": "trigger-github-workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger-gitlab-workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger-openproject-workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger-appflowy-workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger-mcp-workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger-openhands-workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-github-workflow": {
      "main": [
        [
          {
            "node": "determine-additional-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-gitlab-workflow": {
      "main": [
        [
          {
            "node": "determine-additional-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-openproject-workflow": {
      "main": [
        [
          {
            "node": "determine-additional-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-appflowy-workflow": {
      "main": [
        [
          {
            "node": "determine-additional-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-mcp-workflow": {
      "main": [
        [
          {
            "node": "determine-additional-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-openhands-workflow": {
      "main": [
        [
          {
            "node": "determine-additional-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "determine-additional-workflows": {
      "main": [
        [
          {
            "node": "check-special-events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-special-events": {
      "main": [
        [
          {
            "node": "trigger-code-review",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check-documentation-event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-code-review": {
      "main": [
        [
          {
            "node": "prepare-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-documentation-event": {
      "main": [
        [
          {
            "node": "trigger-documentation-sync",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check-notification-needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-documentation-sync": {
      "main": [
        [
          {
            "node": "prepare-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-notification-needed": {
      "main": [
        [
          {
            "node": "trigger-notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "prepare-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger-notification": {
      "main": [
        [
          {
            "node": "prepare-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-response": {
      "main": [
        [
          {
            "node": "send-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handler"
  },
  "tags": ["integration", "hub", "core", "improved"]
}