{
  "name": "Reporting-Service",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-report",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "report-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.report_type }}",
              "operation": "equal",
              "value2": "project_status"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "check-report-type"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "List Work Packages",
        "filters": {
          "fields": [
            {
              "name": "_links.project.href",
              "value": "={{ '/api/v3/projects/' + $json.project_id }}"
            }
          ],
          "updatedAt": {
            "operator": "gt",
            "value": "={{ $now.minus({ days: $json.days || 7 }).toISO() }}"
          }
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [660, 200],
      "id": "get-project-work-packages"
    },
    {
      "parameters": {
        "provider": "={{ $env.LLM.provider }}",
        "apiKey": "={{ $env.LLM.apiKey }}",
        "model": "={{ $env.LLM.model }}",
        "prompt": "=# Project Status Report Generation\n\nGenerate a comprehensive project status report based on the following data about work packages in a project. The report should highlight progress, blockers, and next steps.\n\n## Project Information\nProject ID: {{ $json.project_id }}\nProject Name: {{ $json.project_name }}\nReport Period: Last {{ $json.days || 7 }} days\n\n## Work Packages Data\n```json\n{{ JSON.stringify($json.workPackages) }}\n```\n\nPlease generate a professional status report with the following sections:\n1. Executive Summary\n2. Key Metrics (completed items, in progress, blocked)\n3. Progress Highlights\n4. Risks and Issues\n5. Next Steps\n\nThe report should be formatted in Markdown.",
        "options": {
          "maxTokens": 2000,
          "temperature": 0.3
        }
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [860, 200],
      "id": "generate-project-report"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.report_type }}",
              "operation": "equal",
              "value2": "tasks_summary"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [660, 400],
      "id": "check-if-tasks-summary"
    },
    {
      "parameters": {
        "authentication": "accessToken",
        "resource": "issue",
        "operation": "getAll",
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.gitlab",
      "typeVersion": 1,
      "position": [860, 400],
      "id": "get-gitlab-issues"
    },
    {
      "parameters": {
        "provider": "={{ $env.LLM.provider }}",
        "apiKey": "={{ $env.LLM.apiKey }}",
        "model": "={{ $env.LLM.model }}",
        "prompt": "=# Tasks Summary Report Generation\n\nGenerate a comprehensive tasks summary report based on the following data from GitLab issues. The report should highlight task distribution, progress, and priorities.\n\n## Issues Data\n```json\n{{ JSON.stringify($json) }}\n```\n\nPlease generate a professional tasks summary report with the following sections:\n1. Tasks Overview\n2. Priority Distribution\n3. Team Workload Analysis\n4. Timeline and Deadlines\n5. Recommendations\n\nThe report should be formatted in Markdown.",
        "options": {
          "maxTokens": 2000,
          "temperature": 0.3
        }
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1060, 400],
      "id": "generate-tasks-report"
    },
    {
      "parameters": {
        "operation": "upsert",
        "databaseId": "={{ $env.APPFLOWY_DATABASE_ID }}",
        "record": "={\n  \"Title\": \"Report: \" + ($json.report_type === 'project_status' ? \"Project Status\" : \"Tasks Summary\"),\n  \"Type\": \"Report\",\n  \"Content\": $json.text || $json.result,\n  \"Report Type\": $json.report_type,\n  \"Generated At\": new Date().toISOString(),\n  \"Project ID\": $json.project_id,\n  \"Project Name\": $json.project_name\n}"
      },
      "type": "n8n-nodes-base.appflowy",
      "typeVersion": 1,
      "position": [1260, 300],
      "id": "save-report-to-appflowy"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ 'Report: ' + ($json.report_type === 'project_status' ? 'Project Status' : 'Tasks Summary') }}",
        "description": "={{ 'A new report has been generated.\\n\\nType: ' + $json.report_type + '\\n\\nProject: ' + $json.project_name + ' (' + $json.project_id + ')\\n\\nGenerated at: ' + new Date().toISOString() + '\\n\\nSaved to AppFlowy.' }}",
        "_links": {
          "project": {
            "href": "={{ '/api/v3/projects/' + $json.project_id }}"
          },
          "type": {
            "href": "/api/v3/types/3"
          }
        },
        "additionalFields": {
          "customField1": "report",
          "customField2": "={{ $json.recordId }}"
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1460, 300],
      "id": "create-report-work-package"
    }
  ],
  "connections": {
    "report-webhook": {
      "main": [
        [
          {
            "node": "check-report-type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-report-type": {
      "main": [
        [
          {
            "node": "get-project-work-packages",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check-if-tasks-summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-project-work-packages": {
      "main": [
        [
          {
            "node": "generate-project-report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-project-report": {
      "main": [
        [
          {
            "node": "save-report-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-if-tasks-summary": {
      "main": [
        [
          {
            "node": "get-gitlab-issues",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "get-gitlab-issues": {
      "main": [
        [
          {
            "node": "generate-tasks-report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-tasks-report": {
      "main": [
        [
          {
            "node": "save-report-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save-report-to-appflowy": {
      "main": [
        [
          {
            "node": "create-report-work-package",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-report-work-package": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  }
}
