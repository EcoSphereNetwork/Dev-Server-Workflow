{
  "name": "AFFiNE-Integration",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 5,
              "unit": "minutes"
            }
          ]
        },
        "url": "={{ $env.AFFINE_API_URL }}/api/workspaces",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.AFFINE_API_KEY }}"
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "get-affine-workspaces"
    },
    {
      "parameters": {
        "functionCode": "// Process workspaces and check for changes\nconst lastCheckedTimestamp = $getNodeParameter('lastCheckedTimestamp', new Date(0).toISOString());\nconst now = new Date().toISOString();\n\nconst workspaces = $input.item.json.body.workspaces || [];\nconst changedWorkspaces = [];\n\nfor (const workspace of workspaces) {\n  // Check if workspace was updated since last check\n  if (workspace.updatedAt && workspace.updatedAt > lastCheckedTimestamp) {\n    changedWorkspaces.push(workspace);\n  }\n}\n\n// Update the last checked timestamp for the next run\n$setNodeParameter('lastCheckedTimestamp', now);\n\n// Return changed workspaces\nreturn changedWorkspaces.map(workspace => ({ json: workspace }));"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "process-affine-workspaces"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "split-workspaces"
    },
    {
      "parameters": {
        "url": "={{ $env.AFFINE_API_URL }}/api/workspaces/{{ $json.id }}/docs",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.AFFINE_API_KEY }}"
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 300],
      "id": "get-workspace-docs"
    },
    {
      "parameters": {
        "functionCode": "// Process documents and check for changes\nconst lastCheckedTimestamp = $getNodeParameter('lastCheckedDocsTimestamp', new Date(0).toISOString());\nconst now = new Date().toISOString();\n\nconst workspace = $input.item.json;\nconst docs = ($input.item.json.body && $input.item.json.body.docs) || [];\nconst changedDocs = [];\n\nfor (const doc of docs) {\n  // Check if document was updated since last check\n  if (doc.updatedAt && doc.updatedAt > lastCheckedTimestamp) {\n    changedDocs.push({\n      ...doc,\n      workspaceId: workspace.id,\n      workspaceName: workspace.name\n    });\n  }\n}\n\n// Update the last checked timestamp for the next run\n$setNodeParameter('lastCheckedDocsTimestamp', now);\n\n// Return changed documents\nreturn changedDocs.map(doc => ({ json: doc }));"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300],
      "id": "process-affine-docs"
    },
    {
      "parameters": {
        "url": "={{ $env.AFFINE_API_URL }}/api/workspaces/{{ $json.workspaceId }}/docs/{{ $json.id }}/content",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.AFFINE_API_KEY }}"
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1340, 300],
      "id": "get-doc-content"
    },
    {
      "parameters": {
        "mode": "jsonToJson",
        "jsonInput": "={{ $json }}",
        "options": {
          "dotNotation": true
        },
        "jsonOutput": "={\n  \"title\": $json.title || \"AFFiNE Document\",\n  \"description\": $json.body ? $json.body.content.slice(0, 500) + \"...\" : \"No content available\",\n  \"source_type\": \"affine\",\n  \"source_id\": $json.id,\n  \"url\": $env.AFFINE_BASE_URL + \"/workspace/\" + $json.workspaceId + \"/doc/\" + $json.id,\n  \"status\": \"active\",\n  \"creator\": $json.createdBy || \"affine-user\",\n  \"workspace_id\": $json.workspaceId,\n  \"workspace_name\": $json.workspaceName,\n  \"updated_at\": $json.updatedAt,\n  \"created_at\": $json.createdAt,\n  \"doc_type\": $json.type || \"document\",\n  \"page_type\": $json.page_type || \"doc\",\n  \"has_edits\": $json.updatedAt !== $json.createdAt,\n  \"raw_data\": $json\n}"
      },
      "type": "n8n-nodes-base.itemBinary",
      "typeVersion": 1,
      "position": [1560, 300],
      "id": "normalize-affine-data"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "affine-webhook",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [1780, 300],
      "id": "affine-webhook-out"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "affine-to-openproject",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 600],
      "id": "affine-to-openproject-webhook"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "List Work Packages",
        "filters": {
          "fields": [
            {
              "name": "customField1",
              "value": "affine"
            },
            {
              "name": "customField2",
              "value": "={{ $json.source_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [460, 600],
      "id": "find-existing-work-package"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json._embedded ? $json._embedded.elements.length : 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 600],
      "id": "check-work-package-exists"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Update Work Package",
        "id": "={{ $json._embedded.elements[0].id }}",
        "subject": "={{ $json.title }}",
        "description": "={{ $json._embedded.elements[0].description.raw + '\\n\\nUpdate from AFFiNE: ' + $json.description }}",
        "_links": {}
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [900, 500],
      "id": "update-work-package"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ $json.title }}",
        "description": "={{ $json.description + '\\n\\nSource: AFFiNE\\nWorkspace: ' + $json.workspace_name + '\\nURL: ' + $json.url }}",
        "_links": {
          "project": {
            "href": "/api/v3/projects/1"
          },
          "type": {
            "href": "/api/v3/types/3"
          }
        },
        "additionalFields": {
          "customField1": "affine",
          "customField2": "={{ $json.source_id }}",
          "customField3": "={{ $json.workspace_id }}"
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [900, 700],
      "id": "create-work-package"
    },
    {
      "parameters": {
        "operation": "upsert",
        "databaseId": "={{ $env.APPFLOWY_DATABASE_ID }}",
        "record": "={\n  \"Title\": $json.title,\n  \"Description\": $json.description,\n  \"Source\": \"affine\",\n  \"Source ID\": $json.source_id,\n  \"URL\": $json.url,\n  \"Status\": $json.status,\n  \"Creator\": $json.creator,\n  \"Workspace\": $json.workspace_name,\n  \"Type\": $json.doc_type,\n  \"Last Updated\": $json.updated_at,\n  \"OpenProject ID\": $json.id\n}"
      },
      "type": "n8n-nodes-base.appflowy",
      "typeVersion": 1,
      "position": [1120, 600],
      "id": "update-appflowy-record"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "create-affine-doc",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 900],
      "id": "create-affine-doc-webhook"
    },
    {
      "parameters": {
        "url": "={{ $env.AFFINE_API_URL }}/api/workspaces/{{ $json.workspace_id }}/docs",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.AFFINE_API_KEY }}"
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": $json.title || \"New Document\",\n  \"type\": $json.doc_type || \"doc\",\n  \"content\": $json.content || \"\"\n}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [460, 900],
      "id": "create-affine-document"
    },
    {
      "parameters": {
        "mode": "jsonToJson",
        "jsonInput": "={{ $json }}",
        "options": {
          "dotNotation": true
        },
        "jsonOutput": "={\n  \"status\": \"success\",\n  \"message\": \"Document created successfully\",\n  \"doc_id\": $json.body.doc.id,\n  \"workspace_id\": $json.body.doc.workspaceId,\n  \"title\": $json.body.doc.title,\n  \"url\": $env.AFFINE_BASE_URL + \"/workspace/\" + $json.body.doc.workspaceId + \"/doc/\" + $json.body.doc.id\n}"
      },
      "type": "n8n-nodes-base.itemBinary",
      "typeVersion": 1,
      "position": [680, 900],
      "id": "prepare-response"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "create-workshop-doc",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 1100],
      "id": "create-workshop-doc-webhook"
    },
    {
      "parameters": {
        "provider": "={{ $env.LLM.provider }}",
        "apiKey": "={{ $env.LLM.apiKey }}",
        "model": "={{ $env.LLM.model }}",
        "prompt": "=# Workshop Document Creation\n\nI need to create content for a workshop document based on the following information:\n\n## Workshop Details\nTitle: {{ $json.title }}\nTopic: {{ $json.topic }}\nDuration: {{ $json.duration || '2 hours' }}\nParticipants: {{ $json.participants || '5-10 people' }}\n\n## Content Requirements\n{{ $json.requirements || 'Create a standard workshop structure with objectives, activities, and materials needed.' }}\n\nPlease generate a complete workshop document that includes:\n1. Introduction and objectives\n2. Agenda with timeframes\n3. Activity descriptions with instructions\n4. Materials needed\n5. Facilitation notes\n6. Follow-up tasks\n\nThe content should be formatted in Markdown and be ready to use in AFFiNE.",
        "options": {
          "maxTokens": 2000,
          "temperature": 0.5
        }
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [460, 1100],
      "id": "generate-workshop-content"
    },
    {
      "parameters": {
        "url": "={{ $env.AFFINE_API_URL }}/api/workspaces/{{ $json.workspace_id }}/docs",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.AFFINE_API_KEY }}"
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": $json.title || \"Workshop: \" + $json.topic,\n  \"type\": \"doc\",\n  \"content\": $json.result || \"\"\n}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 1100],
      "id": "create-workshop-document"
    },
    {
      "parameters": {
        "mode": "jsonToJson",
        "jsonInput": "={{ $json }}",
        "options": {
          "dotNotation": true
        },
        "jsonOutput": "={\n  \"status\": \"success\",\n  \"message\": \"Workshop document created successfully\",\n  \"doc_id\": $json.body.doc.id,\n  \"workspace_id\": $json.body.doc.workspaceId,\n  \"title\": $json.body.doc.title,\n  \"url\": $env.AFFINE_BASE_URL + \"/workspace/\" + $json.body.doc.workspaceId + \"/doc/\" + $json.body.doc.id\n}"
      },
      "type": "n8n-nodes-base.itemBinary",
      "typeVersion": 1,
      "position": [900, 1100],
      "id": "prepare-workshop-response"
    }
  ],
  "connections": {
    "get-affine-workspaces": {
      "main": [
        [
          {
            "node": "process-affine-workspaces",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-affine-workspaces": {
      "main": [
        [
          {
            "node": "split-workspaces",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split-workspaces": {
      "main": [
        [
          {
            "node": "get-workspace-docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-workspace-docs": {
      "main": [
        [
          {
            "node": "process-affine-docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-affine-docs": {
      "main": [
        [
          {
            "node": "get-doc-content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-doc-content": {
      "main": [
        [
          {
            "node": "normalize-affine-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize-affine-data": {
      "main": [
        [
          {
            "node": "affine-webhook-out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "affine-to-openproject-webhook": {
      "main": [
        [
          {
            "node": "find-existing-work-package",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find-existing-work-package": {
      "main": [
        [
          {
            "node": "check-work-package-exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-work-package-exists": {
      "main": [
        [
          {
            "node": "update-work-package",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-work-package",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-work-package": {
      "main": [
        [
          {
            "node": "update-appflowy-record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-work-package": {
      "main": [
        [
          {
            "node": "update-appflowy-record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-affine-doc-webhook": {
      "main": [
        [
          {
            "node": "create-affine-document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-affine-document": {
      "main": [
        [
          {
            "node": "prepare-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-workshop-doc-webhook": {
      "main": [
        [
          {
            "node": "generate-workshop-content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-workshop-content": {
      "main": [
        [
          {
            "node": "create-workshop-document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-workshop-document": {
      "main": [
        [
          {
            "node": "prepare-workshop-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  }
}
