{
  "name": "Multi-MCP-Server-Integration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mcp-integration",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "mcp-integration-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Identify which MCP server this data is coming from\nconst serverName = $json.server_name || 'unknown';\nconst serverType = $json.server_type || 'unknown';\n\n// Add metadata for processing\nreturn {\n  ...($json),\n  server_identified: true,\n  server_category: serverType.includes('github') ? 'github' : \n                  serverType.includes('filesystem') ? 'filesystem' : \n                  serverType.includes('memory') ? 'memory' : \n                  serverType.includes('puppeteer') ? 'browser' : \n                  serverType.includes('wikipedia') ? 'knowledge' : \n                  serverType.includes('sequential') ? 'thinking' : \n                  serverType.includes('desktop') ? 'desktop' : 'other',\n  timestamp: $json.timestamp || new Date().toISOString(),\n  llm_analyzed: $json.llm_analyzed || false,\n  priority_score: $json.severity === 'critical' ? 100 : \n                 $json.severity === 'error' ? 80 : \n                 $json.severity === 'warning' ? 60 : \n                 $json.severity === 'info' ? 40 : 20\n};"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "process-server-metadata"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.llm_analyzed }}",
              "value2": true,
              "operation": "equal"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "check-if-analyzed"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "List Work Packages",
        "filters": {
          "fields": [
            {
              "name": "customField1",
              "value": "mcp_server"
            },
            {
              "name": "customField2",
              "value": "={{ $json.source_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [900, 200],
      "id": "find-existing-work-package"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json._embedded ? $json._embedded.elements.length : 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 400],
      "id": "check-work-package-exists"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Update Work Package",
        "id": "={{ $json._embedded.elements[0].id }}",
        "subject": "={{ $json.title || 'MCP Server Event: ' + $json.server_name }}",
        "description": "={{ $json._embedded.elements[0].description.raw + '\\n\\nUpdate from MCP Server (' + $json.server_name + '):\\n' + $json.description + '\\n\\nTimestamp: ' + $json.timestamp + '\\nSeverity: ' + $json.severity + '\\nComponents: ' + ($json.components ? $json.components.join(', ') : 'none') }}",
        "_links": {
          "status": {
            "href": "={{ '/api/v3/statuses/' + ($json.severity === 'critical' ? '7' : $json.severity === 'error' ? '6' : $json.severity === 'warning' ? '5' : '1') }}"
          },
          "priority": {
            "href": "={{ '/api/v3/priorities/' + ($json.severity === 'critical' ? '7' : $json.severity === 'error' ? '6' : $json.severity === 'warning' ? '5' : '3') }}"
          }
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1120, 300],
      "id": "update-work-package"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ $json.title || 'MCP Server Event: ' + $json.server_name + ' - ' + $json.type }}",
        "description": "={{ $json.description + '\\n\\nSource: MCP Server (' + $json.server_name + ')\\nType: ' + $json.type + '\\nSeverity: ' + $json.severity + '\\nTimestamp: ' + $json.timestamp + '\\nComponents: ' + ($json.components ? $json.components.join(', ') : 'none') + '\\n\\nServer Category: ' + $json.server_category + '\\nServer URL: ' + ($json.server_url || 'N/A') }}",
        "_links": {
          "project": {
            "href": "/api/v3/projects/1"
          },
          "type": {
            "href": "/api/v3/types/1"
          },
          "status": {
            "href": "={{ '/api/v3/statuses/' + ($json.severity === 'critical' ? '7' : $json.severity === 'error' ? '6' : $json.severity === 'warning' ? '5' : '1') }}"
          },
          "priority": {
            "href": "={{ '/api/v3/priorities/' + ($json.severity === 'critical' ? '7' : $json.severity === 'error' ? '6' : $json.severity === 'warning' ? '5' : '3') }}"
          }
        },
        "additionalFields": {
          "customField1": "mcp_server",
          "customField2": "={{ $json.source_id }}",
          "customField3": "={{ $json.server_name }}"
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1120, 500],
      "id": "create-work-package"
    },
    {
      "parameters": {
        "operation": "upsert",
        "databaseId": "={{ $env.APPFLOWY_DATABASE_ID }}",
        "record": "={\n  \"Title\": $json.title || 'MCP Server Event: ' + $json.server_name + ' - ' + $json.type,\n  \"Description\": $json.description,\n  \"Source\": \"mcp_server\",\n  \"Server\": $json.server_name,\n  \"Server Category\": $json.server_category,\n  \"Source ID\": $json.source_id,\n  \"Type\": $json.type,\n  \"Severity\": $json.severity,\n  \"Components\": $json.components ? $json.components.join(\", \") : \"\",\n  \"Timestamp\": $json.timestamp,\n  \"OpenProject ID\": $json.id,\n  \"Priority Score\": $json.priority_score,\n  \"Last Updated\": new Date().toISOString()\n}"
      },
      "type": "n8n-nodes-base.appflowy",
      "typeVersion": 1,
      "position": [1340, 400],
      "id": "update-appflowy-record"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "=http://localhost:5678/webhook/llm-analyze",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"data\": $json,\n  \"server_name\": $json.server_name,\n  \"server_type\": $json.server_type || $json.server_category,\n  \"event_type\": $json.type,\n  \"severity\": $json.severity,\n  \"timestamp\": $json.timestamp,\n  \"source_id\": $json.source_id,\n  \"request_id\": \"mcp-analysis-\" + Date.now()\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 500],
      "id": "send-to-llm-agent"
    },
    {
      "parameters": {
        "channel": "={{ $env.SLACK_CHANNEL_ALERTS }}",
        "text": "=**MCP Server Alert**: {{ $json.title || 'Event from ' + $json.server_name }}\n\n**Severity**: {{ $json.severity }}\n**Server**: {{ $json.server_name }}\n**Type**: {{ $json.type }}\n**Timestamp**: {{ $json.timestamp }}\n\n{{ $json.description }}\n\n_Components: {{ $json.components ? $json.components.join(', ') : 'none' }}_",
        "otherOptions": {
          "attachments": "=[\n  {\n    \"color\": \"{{ $json.severity === 'critical' ? '#FF0000' : $json.severity === 'error' ? '#FFA500' : $json.severity === 'warning' ? '#FFFF00' : '#00FF00' }}\",\n    \"fields\": [\n      {\n        \"title\": \"Server Category\",\n        \"value\": \"{{ $json.server_category }}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Priority Score\",\n        \"value\": \"{{ $json.priority_score }}\",\n        \"short\": true\n      }\n    ]\n  }\n]"
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1340, 600],
      "id": "send-slack-notification",
      "continueOnFail": true
    }
  ],
  "connections": {
    "mcp-integration-webhook": {
      "main": [
        [
          {
            "node": "process-server-metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-server-metadata": {
      "main": [
        [
          {
            "node": "check-if-analyzed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-if-analyzed": {
      "main": [
        [
          {
            "node": "find-existing-work-package",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "send-to-llm-agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find-existing-work-package": {
      "main": [
        [
          {
            "node": "check-work-package-exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-work-package-exists": {
      "main": [
        [
          {
            "node": "update-work-package",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-work-package",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-work-package": {
      "main": [
        [
          {
            "node": "update-appflowy-record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-work-package": {
      "main": [
        [
          {
            "node": "update-appflowy-record",
            "type": "main",
            "index": 0
          },
          {
            "node": "send-slack-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-to-llm-agent": {
      "main": [
        [
          {
            "node": "find-existing-work-package",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  }
}