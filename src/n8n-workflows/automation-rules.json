{
  "name": "Automation-Rules",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 15,
              "unit": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "automation-rules-trigger"
    },
    {
      "parameters": {
        "operation": "listRecords",
        "databaseId": "={{ $env.APPFLOWY_RULES_DATABASE_ID }}"
      },
      "type": "n8n-nodes-base.appflowy",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "get-automation-rules"
    },
    {
      "parameters": {
        "functionCode": "// Process automation rules\nconst rules = items;\nconst processedRules = [];\n\nfor (const rule of rules) {\n  try {\n    // Extract rule data\n    const {\n      Enabled,\n      Type: ruleType,\n      Condition: condition,\n      Source: source,\n      Target: target,\n      Action: action,\n      Parameters: parameters\n    } = rule.json;\n    \n    // Skip disabled rules\n    if (Enabled !== true) continue;\n    \n    // Process the rule\n    processedRules.push({\n      rule_id: rule.json.ID || rule.json.Id,\n      rule_type: ruleType,\n      condition: condition,\n      source: source,\n      target: target,\n      action: action,\n      parameters: parameters ? JSON.parse(parameters) : {}\n    });\n  } catch (error) {\n    console.error(`Error processing rule: ${error.message}`);\n  }\n}\n\n// Return only enabled and valid rules\nreturn [{ json: { rules: processedRules } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [660, 300],
      "id": "process-rules"
    },
    {
      "parameters": {
        "mode": "splitInBatches",
        "property": "rules",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [860, 300],
      "id": "split-rules"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.rule_type }}",
              "operation": "equal",
              "value2": "schedule"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 300],
      "id": "check-rule-type"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.rule_type }}",
              "operation": "equal",
              "value2": "event"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 500],
      "id": "check-if-event-rule"
    },
    {
      "parameters": {
        "functionCode": "// Process schedule rule\nconst rule = $input.item.json;\n\n// Check if we should run this scheduled rule now\nconst lastRun = rule.parameters.last_run ? new Date(rule.parameters.last_run) : new Date(0);\nconst now = new Date();\nconst frequency = rule.parameters.frequency || 'daily';\nlet shouldRun = false;\n\nswitch (frequency) {\n  case 'hourly':\n    shouldRun = (now - lastRun) >= 60 * 60 * 1000; // 1 hour\n    break;\n  case 'daily':\n    shouldRun = (now - lastRun) >= 24 * 60 * 60 * 1000; // 24 hours\n    break;\n  case 'weekly':\n    shouldRun = (now - lastRun) >= 7 * 24 * 60 * 60 * 1000; // 7 days\n    break;\n  case 'monthly':\n    // Simple approximation for month\n    shouldRun = (now - lastRun) >= 30 * 24 * 60 * 60 * 1000; // ~30 days\n    break;\n  default:\n    shouldRun = false;\n}\n\n// If rule should run, prepare action data\nif (shouldRun) {\n  return [{\n    json: {\n      rule_id: rule.rule_id,\n      action: rule.action,\n      parameters: rule.parameters,\n      source: rule.source,\n      target: rule.target,\n      execution_time: now.toISOString(),\n      should_update_last_run: true\n    }\n  }];\n} else {\n  // Skip this rule\n  return [];\n}"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1260, 200],
      "id": "process-schedule-rule"
    },
    {
      "parameters": {
        "functionCode": "// Process event rule\nconst rule = $input.item.json;\n\n// Check recent events to see if any match the rule's condition\nconst recentEvents = $input.item.json.parameters.recent_events || [];\nconst matchingEvents = [];\n\nfor (const event of recentEvents) {\n  let conditionMet = false;\n  \n  try {\n    // Evaluate the condition expression\n    // This is simplified - in a real workflow you'd need more sophisticated condition evaluation\n    if (rule.condition === 'all' || \n        (rule.condition === 'status_change' && event.status_changed) ||\n        (rule.condition === 'priority_high' && event.priority === 'high') ||\n        (rule.condition === 'has_tag' && event.tags && event.tags.includes(rule.parameters.tag))) {\n      conditionMet = true;\n    }\n  } catch (error) {\n    console.error(`Error evaluating condition: ${error.message}`);\n  }\n  \n  if (conditionMet) {\n    matchingEvents.push(event);\n  }\n}\n\n// If any events match, prepare action data\nif (matchingEvents.length > 0) {\n  return matchingEvents.map(event => ({\n    json: {\n      rule_id: rule.rule_id,\n      action: rule.action,\n      parameters: rule.parameters,\n      source: rule.source,\n      target: rule.target,\n      event_data: event,\n      execution_time: new Date().toISOString(),\n      should_update_last_run: true\n    }\n  }));\n} else {\n  // No matching events\n  return [];\n}"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1260, 400],
      "id": "process-event-rule"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "send_email"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1460, 300],
      "id": "route-by-action"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook/send-notification",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"notification_type\": \"email\",\n  \"to\": $json.parameters.email_to,\n  \"subject\": $json.parameters.email_subject || \"Automated Notification\",\n  \"message\": $json.parameters.email_body || \"This is an automated message.\",\n  \"from\": $json.parameters.email_from || \"system@example.com\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1660, 200],
      "id": "send-email-action"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "create_work_package"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1660, 400],
      "id": "check-if-create-workpackage"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ $json.parameters.subject || 'Automated Work Package' }}",
        "description": "={{ $json.parameters.description || 'This work package was created automatically by a rule.' }}",
        "_links": {
          "project": {
            "href": "={{ '/api/v3/projects/' + ($json.parameters.project_id || '1') }}"
          },
          "type": {
            "href": "={{ '/api/v3/types/' + ($json.parameters.type_id || '1') }}"
          },
          "priority": {
            "href": "={{ '/api/v3/priorities/' + ($json.parameters.priority_id || '5') }}"
          }
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1860, 300],
      "id": "create-work-package-action"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "run_llm_agent"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1860, 500],
      "id": "check-if-run-llm"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:5678/webhook/llm-analyze",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": $json.parameters.title || \"LLM Analysis Request\",\n  \"description\": $json.parameters.description || $json.event_data.description || \"\",\n  \"source_type\": $json.source || \"automation\",\n  \"source_id\": $json.event_data ? $json.event_data.id : $json.rule_id,\n  \"custom_prompt\": $json.parameters.custom_prompt\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [2060, 400],
      "id": "run-llm-agent-action"
    },
    {
      "parameters": {
        "operation": "updateRecord",
        "databaseId": "={{ $env.APPFLOWY_RULES_DATABASE_ID }}",
        "recordId": "={{ $json.rule_id }}",
        "updateFields": {
          "fields": [
            {
              "name": "LastRun",
              "value": "={{ $json.execution_time }}"
            },
            {
              "name": "ExecutionCount",
              "value": "={{ $($json.parameters.execution_count || 0) + 1 }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.appflowy",
      "typeVersion": 1,
      "position": [2060, 600],
      "id": "update-rule-execution"
    }
  ],
  "connections": {
    "automation-rules-trigger": {
      "main": [
        [
          {
            "node": "get-automation-rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-automation-rules": {
      "main": [
        [
          {
            "node": "process-rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-rules": {
      "main": [
        [
          {
            "node": "split-rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split-rules": {
      "main": [
        [
          {
            "node": "check-rule-type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-rule-type": {
      "main": [
        [
          {
            "node": "process-schedule-rule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check-if-event-rule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-if-event-rule": {
      "main": [
        [
          {
            "node": "process-event-rule",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "process-schedule-rule": {
      "main": [
        [
          {
            "node": "route-by-action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-event-rule": {
      "main": [
        [
          {
            "node": "route-by-action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "route-by-action": {
      "main": [
        [
          {
            "node": "send-email-action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check-if-create-workpackage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-email-action": {
      "main": [
        [
          {
            "node": "update-rule-execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-if-create-workpackage": {
      "main": [
        [
          {
            "node": "create-work-package-action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "check-if-run-llm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-work-package-action": {
      "main": [
        [
          {
            "node": "update-rule-execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-if-run-llm": {
      "main": [
        [
          {
            "node": "run-llm-agent-action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "update-rule-execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "run-llm-agent-action": {
      "main": [
        [
          {
            "node": "update-rule-execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  }
}
