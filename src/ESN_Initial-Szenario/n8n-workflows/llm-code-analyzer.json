{
  "name": "LLM-Code-Analyzer",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analyze-code",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "code-analyzer-webhook"
    },
    {
      "parameters": {
        "provider": "={{ $env.LLM.provider }}",
        "apiKey": "={{ $env.LLM.apiKey }}",
        "model": "={{ $env.LLM.model }}",
        "prompt": "=# Code Analysis Task\n\nAnalyze the following code and provide insights:\n\n```{{ $json.language || 'code' }}\n{{ $json.code }}\n```\n\n## Analysis Tasks\n1. Identify potential bugs, security vulnerabilities, or performance issues\n2. Suggest improvements for readability and maintainability\n3. Explain complex patterns or algorithms used\n4. Provide a brief summary of what the code does\n5. Rate the code quality on a scale of 1-10 and explain why\n\nRespond in JSON format with the following structure:\n{\n  \"summary\": \"string\",\n  \"issues\": [\n    {\n      \"type\": \"bug|security|performance|readability\",\n      \"severity\": \"high|medium|low\",\n      \"description\": \"string\",\n      \"location\": \"line number or code snippet\",\n      \"suggestion\": \"string\"\n    }\n  ],\n  \"improvements\": [\n    {\n      \"description\": \"string\",\n      \"suggestion\": \"string\"\n    }\n  ],\n  \"patterns_explained\": [\"string\"],\n  \"quality_score\": number,\n  \"quality_justification\": \"string\"\n}",
        "options": {
          "maxTokens": 2000,
          "temperature": 0.2
        }
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "analyze-with-llm"
    },
    {
      "parameters": {
        "mode": "jsonParse",
        "property": "result",
        "options": {}
      },
      "type": "n8n-nodes-base.setJsonProperty",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "parse-llm-response"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.result.issues ? $json.result.issues.filter(issue => issue.severity === 'high').length : 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 300],
      "id": "check-for-critical-issues"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ 'Critical Code Issues: ' + $json.source_id }}",
        "description": "={{ 'Critical issues were found in code from ' + $json.source + ':\\n\\n' + $json.result.issues.filter(issue => issue.severity === 'high').map(issue => '- ' + issue.type.toUpperCase() + ': ' + issue.description + ' at ' + issue.location + '\\n  Suggestion: ' + issue.suggestion).join('\\n\\n') }}",
        "_links": {
          "project": {
            "href": "/api/v3/projects/1"
          },
          "type": {
            "href": "/api/v3/types/1"
          },
          "priority": {
            "href": "/api/v3/priorities/7"
          }
        },
        "additionalFields": {
          "customField1": "code_analysis",
          "customField2": "={{ $json.source_id }}"
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1120, 200],
      "id": "create-critical-issue-work-package"
    },
    {
      "parameters": {
        "operation": "upsert",
        "databaseId": "={{ $env.APPFLOWY_DATABASE_ID }}",
        "record": "={\n  \"Title\": \"Code Analysis: \" + $json.source_id,\n  \"Type\": \"Code Analysis\",\n  \"Source\": $json.source,\n  \"Source ID\": $json.source_id,\n  \"Language\": $json.language || \"code\",\n  \"Summary\": $json.result.summary,\n  \"Issues\": JSON.stringify($json.result.issues),\n  \"Improvements\": JSON.stringify($json.result.improvements),\n  \"Quality Score\": $json.result.quality_score,\n  \"Analysis Date\": new Date().toISOString(),\n  \"Critical Issues\": $json.result.issues ? $json.result.issues.filter(issue => issue.severity === 'high').length : 0\n}"
      },
      "type": "n8n-nodes-base.appflowy",
      "typeVersion": 1,
      "position": [1120, 400],
      "id": "create-code-analysis-record"
    }
  ],
  "connections": {
    "code-analyzer-webhook": {
      "main": [
        [
          {
            "node": "analyze-with-llm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze-with-llm": {
      "main": [
        [
          {
            "node": "parse-llm-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse-llm-response": {
      "main": [
        [
          {
            "node": "check-for-critical-issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-for-critical-issues": {
      "main": [
        [
          {
            "node": "create-critical-issue-work-package",
            "type": "main",
            "index": 0
          },
          {
            "node": "create-code-analysis-record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-code-analysis-record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  }
}
