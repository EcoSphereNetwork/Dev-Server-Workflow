{
  "name": "Improved-GitHub-to-OpenProject",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "github-to-openproject",
        "options": {
          "responseMode": "responseNode"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "github-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Validate and normalize GitHub data\nlet eventData = $json;\n\n// Check if this is a direct GitHub webhook or from the integration hub\nif (eventData.source_type === 'github') {\n  // Already normalized by integration hub\n  return eventData;\n}\n\n// This is a direct GitHub webhook, normalize it\nconst eventType = $headers['x-github-event'] || 'unknown';\nlet normalizedEvent = {\n  id: eventData.id || `github-${Date.now()}`,\n  timestamp: new Date().toISOString(),\n  source_type: 'github',\n  event_type: eventType,\n  raw_data: eventData\n};\n\n// Extract repository information\nif (eventData.repository) {\n  normalizedEvent.repository = eventData.repository.full_name;\n  normalizedEvent.repository_url = eventData.repository.html_url;\n}\n\n// Process based on event type\nswitch(eventType) {\n  case 'issues':\n    normalizedEvent.source_id = `issue-${eventData.issue.id}`;\n    normalizedEvent.title = eventData.issue.title;\n    normalizedEvent.description = eventData.issue.body || '';\n    normalizedEvent.status = eventData.action;\n    normalizedEvent.url = eventData.issue.html_url;\n    normalizedEvent.labels = eventData.issue.labels?.map(l => l.name) || [];\n    normalizedEvent.assignee = eventData.issue.assignee?.login || '';\n    break;\n    \n  case 'pull_request':\n    normalizedEvent.source_id = `pr-${eventData.pull_request.id}`;\n    normalizedEvent.title = eventData.pull_request.title;\n    normalizedEvent.description = eventData.pull_request.body || '';\n    normalizedEvent.status = eventData.action;\n    normalizedEvent.url = eventData.pull_request.html_url;\n    normalizedEvent.branch = eventData.pull_request.head.ref;\n    normalizedEvent.labels = eventData.pull_request.labels?.map(l => l.name) || [];\n    normalizedEvent.assignee = eventData.pull_request.assignee?.login || '';\n    break;\n    \n  case 'push':\n    normalizedEvent.source_id = `push-${eventData.after}`;\n    normalizedEvent.title = `Push to ${eventData.ref.replace('refs/heads/', '')}`;\n    normalizedEvent.description = eventData.commits?.map(c => `${c.id.substring(0, 7)}: ${c.message}`).join('\\n') || '';\n    normalizedEvent.status = 'pushed';\n    normalizedEvent.url = eventData.compare;\n    normalizedEvent.branch = eventData.ref.replace('refs/heads/', '');\n    normalizedEvent.assignee = eventData.pusher?.name || '';\n    break;\n    \n  default:\n    normalizedEvent.source_id = `github-event-${Date.now()}`;\n    normalizedEvent.title = `GitHub ${eventType} Event`;\n    normalizedEvent.description = `Received ${eventType} event from GitHub`;\n    normalizedEvent.status = 'received';\n}\n\nreturn normalizedEvent;"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "normalize-github-data"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.event_type }}",
              "operation": "equal",
              "value2": "issues"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "route-by-event-type"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "List Work Packages",
        "filters": {
          "fields": [
            {
              "name": "customField1",
              "value": "github_issue"
            },
            {
              "name": "customField2",
              "value": "={{ $json.source_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [900, 100],
      "id": "find-existing-issue-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "List Work Packages",
        "filters": {
          "fields": [
            {
              "name": "customField1",
              "value": "github_pr"
            },
            {
              "name": "customField2",
              "value": "={{ $json.source_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [900, 300],
      "id": "find-existing-pr-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "List Work Packages",
        "filters": {
          "fields": [
            {
              "name": "customField1",
              "value": "github_push"
            },
            {
              "name": "customField2",
              "value": "={{ $json.repository }}"
            },
            {
              "name": "customField3",
              "value": "={{ $json.branch }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [900, 500],
      "id": "find-existing-push-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json._embedded ? $json._embedded.elements.length : 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 100],
      "id": "check-issue-exists"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json._embedded ? $json._embedded.elements.length : 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 300],
      "id": "check-pr-exists"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json._embedded ? $json._embedded.elements.length : 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 500],
      "id": "check-push-exists"
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Update Work Package",
        "id": "={{ $json._embedded.elements[0].id }}",
        "subject": "={{ $node[\"normalize-github-data\"].json.title }}",
        "description": "={{ $json._embedded.elements[0].description.raw + '\\n\\nUpdate from GitHub:\\n' + $node[\"normalize-github-data\"].json.description }}",
        "_links": {
          "status": {
            "href": "={{ '/api/v3/statuses/' + ($node[\"normalize-github-data\"].json.status === 'closed' ? '12' : $node[\"normalize-github-data\"].json.status === 'reopened' ? '1' : '7') }}"
          }
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1340, 40],
      "id": "update-issue-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ $node[\"normalize-github-data\"].json.title }}",
        "description": "={{ $node[\"normalize-github-data\"].json.description + '\\n\\nSource: GitHub Issue\\nRepository: ' + $node[\"normalize-github-data\"].json.repository + '\\nURL: ' + $node[\"normalize-github-data\"].json.url }}",
        "_links": {
          "project": {
            "href": "/api/v3/projects/1"
          },
          "type": {
            "href": "/api/v3/types/1"
          },
          "status": {
            "href": "={{ '/api/v3/statuses/' + ($node[\"normalize-github-data\"].json.status === 'closed' ? '12' : '1') }}"
          },
          "priority": {
            "href": "/api/v3/priorities/8"
          }
        },
        "additionalFields": {
          "customField1": "github_issue",
          "customField2": "={{ $node[\"normalize-github-data\"].json.source_id }}",
          "customField3": "={{ $node[\"normalize-github-data\"].json.repository }}"
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1340, 160],
      "id": "create-issue-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Update Work Package",
        "id": "={{ $json._embedded.elements[0].id }}",
        "subject": "={{ $node[\"normalize-github-data\"].json.title }}",
        "description": "={{ $json._embedded.elements[0].description.raw + '\\n\\nUpdate from GitHub:\\n' + $node[\"normalize-github-data\"].json.description }}",
        "_links": {
          "status": {
            "href": "={{ '/api/v3/statuses/' + ($node[\"normalize-github-data\"].json.status === 'closed' ? '12' : $node[\"normalize-github-data\"].json.status === 'merged' ? '10' : '7') }}"
          }
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1340, 240],
      "id": "update-pr-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ $node[\"normalize-github-data\"].json.title }}",
        "description": "={{ $node[\"normalize-github-data\"].json.description + '\\n\\nSource: GitHub Pull Request\\nRepository: ' + $node[\"normalize-github-data\"].json.repository + '\\nBranch: ' + $node[\"normalize-github-data\"].json.branch + '\\nURL: ' + $node[\"normalize-github-data\"].json.url }}",
        "_links": {
          "project": {
            "href": "/api/v3/projects/1"
          },
          "type": {
            "href": "/api/v3/types/2"
          },
          "status": {
            "href": "={{ '/api/v3/statuses/' + ($node[\"normalize-github-data\"].json.status === 'closed' ? '12' : $node[\"normalize-github-data\"].json.status === 'merged' ? '10' : '7') }}"
          },
          "priority": {
            "href": "/api/v3/priorities/8"
          }
        },
        "additionalFields": {
          "customField1": "github_pr",
          "customField2": "={{ $node[\"normalize-github-data\"].json.source_id }}",
          "customField3": "={{ $node[\"normalize-github-data\"].json.repository }}"
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1340, 360],
      "id": "create-pr-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Update Work Package",
        "id": "={{ $json._embedded.elements[0].id }}",
        "description": "={{ $json._embedded.elements[0].description.raw + '\\n\\nNew commits:\\n' + $node[\"normalize-github-data\"].json.description }}"
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1340, 440],
      "id": "update-push-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Work Packages",
        "operation": "Create Work Package",
        "subject": "={{ $node[\"normalize-github-data\"].json.title }}",
        "description": "={{ $node[\"normalize-github-data\"].json.description + '\\n\\nSource: GitHub Push\\nRepository: ' + $node[\"normalize-github-data\"].json.repository + '\\nBranch: ' + $node[\"normalize-github-data\"].json.branch + '\\nURL: ' + $node[\"normalize-github-data\"].json.url }}",
        "_links": {
          "project": {
            "href": "/api/v3/projects/1"
          },
          "type": {
            "href": "/api/v3/types/3"
          },
          "status": {
            "href": "/api/v3/statuses/7"
          },
          "priority": {
            "href": "/api/v3/priorities/7"
          }
        },
        "additionalFields": {
          "customField1": "github_push",
          "customField2": "={{ $node[\"normalize-github-data\"].json.repository }}",
          "customField3": "={{ $node[\"normalize-github-data\"].json.branch }}"
        }
      },
      "type": "n8n-nodes-base.openProject",
      "typeVersion": 1,
      "position": [1340, 560],
      "id": "create-push-wp",
      "credentials": {
        "openProjectApi": {
          "id": "1",
          "name": "OpenProject account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "databaseId": "={{ $env.APPFLOWY_DATABASE_ID }}",
        "record": "={\n  \"Title\": $json.subject,\n  \"Description\": $json.description.raw,\n  \"Source\": \"github\",\n  \"Repository\": $node[\"normalize-github-data\"].json.repository,\n  \"Source ID\": $node[\"normalize-github-data\"].json.source_id,\n  \"Type\": $node[\"normalize-github-data\"].json.event_type,\n  \"Status\": $node[\"normalize-github-data\"].json.status,\n  \"URL\": $node[\"normalize-github-data\"].json.url,\n  \"OpenProject ID\": $json.id,\n  \"Last Updated\": new Date().toISOString()\n}"
      },
      "type": "n8n-nodes-base.appflowy",
      "typeVersion": 1,
      "position": [1560, 300],
      "id": "sync-to-appflowy",
      "credentials": {
        "appFlowyApi": {
          "id": "2",
          "name": "AppFlowy account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Prepare response\nreturn {\n  success: true,\n  message: `GitHub event processed successfully: ${$node[\"normalize-github-data\"].json.event_type}`,\n  source_type: 'github',\n  event_type: $node[\"normalize-github-data\"].json.event_type,\n  openproject_id: $json.id,\n  appflowy_synced: true,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 300],
      "id": "prepare-response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300],
      "id": "send-response"
    }
  ],
  "connections": {
    "github-webhook": {
      "main": [
        [
          {
            "node": "normalize-github-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize-github-data": {
      "main": [
        [
          {
            "node": "route-by-event-type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "route-by-event-type": {
      "main": [
        [
          {
            "node": "find-existing-issue-wp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "find-existing-pr-wp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "find-existing-push-wp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find-existing-issue-wp": {
      "main": [
        [
          {
            "node": "check-issue-exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find-existing-pr-wp": {
      "main": [
        [
          {
            "node": "check-pr-exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find-existing-push-wp": {
      "main": [
        [
          {
            "node": "check-push-exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-issue-exists": {
      "main": [
        [
          {
            "node": "update-issue-wp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-issue-wp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-pr-exists": {
      "main": [
        [
          {
            "node": "update-pr-wp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-pr-wp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-push-exists": {
      "main": [
        [
          {
            "node": "update-push-wp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-push-wp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-issue-wp": {
      "main": [
        [
          {
            "node": "sync-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-issue-wp": {
      "main": [
        [
          {
            "node": "sync-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-pr-wp": {
      "main": [
        [
          {
            "node": "sync-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-pr-wp": {
      "main": [
        [
          {
            "node": "sync-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-push-wp": {
      "main": [
        [
          {
            "node": "sync-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-push-wp": {
      "main": [
        [
          {
            "node": "sync-to-appflowy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sync-to-appflowy": {
      "main": [
        [
          {
            "node": "prepare-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-response": {
      "main": [
        [
          {
            "node": "send-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handler"
  },
  "tags": ["github", "openproject", "integration", "improved"]
}