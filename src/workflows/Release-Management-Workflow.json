{
  "name": "Release-Management-Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "gitlab-tag-webhook",
        "responseMode": "onReceived",
        "options": {
          "rawBody": true
        }
      },
      "id": "93f1acb2-6848-49b3-9c1e-08db368d9e0d",
      "name": "GitLab Tag Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "gitlab-tag-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extrahiere und validiere die Tag-Daten aus dem Webhook\nconst payload = $input.item.json.body || $input.item.json;\n\n// Pr√ºfen, ob es sich um ein Tag-Event handelt\nif (!payload.object_kind || payload.object_kind !== 'tag_push') {\n  console.log(`Ignoriere nicht-Tag Event: ${payload.object_kind || 'unbekannt'}`);\n  return {\n    continue: false,\n    reason: `Ignoriere Event vom Typ ${payload.object_kind || 'unbekannt'}`\n  };\n}\n\n// Extrahiere die relevanten Daten\nconst tagName = payload.ref.replace('refs/tags/', '');\nconst project = payload.project;\nconst user = payload.user_name || 'unknown';\nconst commitId = payload.checkout_sha;\n\n// Stelle sicher, dass die Tag-Informationen vollst√§ndig sind\nif (!tagName || !project || !project.id || !commitId) {\n  console.error('Unvollst√§ndige Tag-Daten erhalten:', JSON.stringify(payload, null, 2));\n  return {\n    continue: false,\n    reason: 'Unvollst√§ndige Tag-Daten'\n  };\n}\n\n// Pr√ºfe, ob es sich um ein Release-Tag handelt (z.B. v1.0.0, 1.0.0)\nconst releaseTagPattern = /^v?\\d+\\.\\d+\\.\\d+(?:-[\\w.-]+)?$/;\nif (!releaseTagPattern.test(tagName)) {\n  console.log(`Ignoriere Nicht-Release-Tag: ${tagName}`);\n  return {\n    continue: false,\n    reason: `Kein Release-Tag-Format: ${tagName}`\n  };\n}\n\n// Sammle alle relevanten Tag-Daten\nconst tagData = {\n  tag_name: tagName,\n  project_id: project.id,\n  project_name: project.name,\n  project_path: project.path_with_namespace,\n  user: user,\n  commit_id: commitId,\n  created_at: new Date().toISOString(),\n  // F√ºge Synchronisations-Marker hinzu\n  sync_source: 'gitlab',\n  sync_timestamp: new Date().toISOString(),\n  event_type: 'tag'\n};\n\n// Log f√ºr Debugging\nconsole.log(`Verarbeite GitLab Tag ${tagName} f√ºr Projekt ${project.name}`);\n\nreturn {\n  continue: true,\n  tagData: tagData\n};"
      },
      "id": "9cff9cc9-60c4-423f-9d77-da7f02fcde58",
      "name": "Validiere und extrahiere Tag-Daten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "gitlab-milestone-webhook",
        "responseMode": "onReceived",
        "options": {
          "rawBody": true
        }
      },
      "id": "4b34c1ed-00a3-4c35-a0d9-bce0a08dfc4f",
      "name": "GitLab Milestone Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        460
      ],
      "webhookId": "gitlab-milestone-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extrahiere und validiere die Milestone-Daten aus dem Webhook\nconst payload = $input.item.json.body || $input.item.json;\n\n// Pr√ºfen, ob es sich um ein Milestone-Event handelt\nif (!payload.object_kind || payload.object_kind !== 'milestone') {\n  console.log(`Ignoriere nicht-Milestone Event: ${payload.object_kind || 'unbekannt'}`);\n  return {\n    continue: false,\n    reason: `Ignoriere Event vom Typ ${payload.object_kind || 'unbekannt'}`\n  };\n}\n\n// Extrahiere die relevanten Daten\nconst milestone = payload.object_attributes;\nconst project = payload.project;\n\n// Stelle sicher, dass die Milestone-Informationen vollst√§ndig sind\nif (!milestone || !milestone.id || !project || !project.id) {\n  console.error('Unvollst√§ndige Milestone-Daten erhalten:', JSON.stringify(payload, null, 2));\n  return {\n    continue: false,\n    reason: 'Unvollst√§ndige Milestone-Daten'\n  };\n}\n\n// Pr√ºfe, ob der Milestone geschlossen wurde (nur dann Release erstellen)\nif (milestone.state !== 'closed') {\n  console.log(`Ignoriere Milestone-Event, da State nicht 'closed' sondern '${milestone.state}' ist`);\n  return {\n    continue: false,\n    reason: `Milestone nicht geschlossen: ${milestone.state}`\n  };\n}\n\n// Sammle alle relevanten Milestone-Daten\nconst milestoneData = {\n  milestone_id: milestone.id,\n  milestone_iid: milestone.iid,\n  title: milestone.title,\n  description: milestone.description || '',\n  project_id: project.id,\n  project_name: project.name,\n  project_path: project.path_with_namespace,\n  start_date: milestone.start_date,\n  due_date: milestone.due_date,\n  created_at: milestone.created_at,\n  updated_at: milestone.updated_at,\n  closed_at: new Date().toISOString(),\n  // F√ºge Synchronisations-Marker hinzu\n  sync_source: 'gitlab',\n  sync_timestamp: new Date().toISOString(),\n  event_type: 'milestone'\n};\n\n// Log f√ºr Debugging\nconsole.log(`Verarbeite geschlossenen GitLab Milestone ${milestone.title} f√ºr Projekt ${project.name}`);\n\nreturn {\n  continue: true,\n  milestoneData: milestoneData\n};"
      },
      "id": "f6f6fcc1-d40e-4cc8-9261-ab02aa03d0b2",
      "name": "Validiere und extrahiere Milestone-Daten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.continue}}",
              "value2": true
            }
          ]
        }
      },
      "id": "6a3f4d75-7c36-48f0-8eb0-0f00cb9ff9c7",
      "name": "Ist Tag relevant?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.continue}}",
              "value2": true
            }
          ]
        }
      },
      "id": "7a4a0ce2-6d99-41a4-9f03-92d1d3cdad18",
      "name": "Ist Milestone relevant?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        460
      ]
    },
    {
      "parameters": {
        "content": "=Ignoriere Event: {{$json.reason}}",
        "options": {}
      },
      "id": "08ea8c4b-a7f3-4a85-b47a-1d15c0df0af4",
      "name": "Ignoriere Tag",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "content": "=Ignoriere Event: {{$json.reason}}",
        "options": {}
      },
      "id": "a339a3aa-b2fd-46d2-9c54-26dbddee9e27",
      "name": "Ignoriere Milestone",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        900,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Statische Konfiguration (sollte in Produktion aus Umgebungsvariablen stammen)\nreturn {\n  // OpenProject API Konfiguration\n  openproject_api_url: 'https://openproject.example.com/api/v3',\n  openproject_api_token: 'YOUR_OPENPROJECT_API_TOKEN',\n  \n  // GitLab API Konfiguration\n  gitlab_api_url: 'https://gitlab.example.com/api/v4',\n  gitlab_api_token: 'YOUR_GITLAB_API_TOKEN',\n  \n  // GitHub API Konfiguration\n  github_api_url: 'https://api.github.com',\n  github_api_token: 'YOUR_GITHUB_API_TOKEN',\n  github_owner: 'your-organization',\n  \n  // Repository-Mapping f√ºr Synchronisation\n  repository_mapping: {\n    '123': {\n      github_repo: 'your-organization/repo1',\n      openproject_project_id: '456'\n    },\n    '124': {\n      github_repo: 'your-organization/repo2',\n      openproject_project_id: '457'\n    },\n    '125': {\n      github_repo: 'your-organization/repo3',\n      openproject_project_id: '458'\n    }\n  },\n  \n  // Logging-Konfiguration\n  debug_mode: true,\n  log_details: true,\n  \n  // Release-Konfiguration\n  include_merge_requests: true,\n  include_issues: true,\n  categorize_changes: true,\n  categories: [\n    { name: 'üöÄ Features', labels: ['feature', 'enhancement'] },\n    { name: 'üêõ Bug Fixes', labels: ['bug', 'fix'] },\n    { name: 'üìù Documentation', labels: ['documentation', 'docs'] },\n    { name: 'üîß Maintenance', labels: ['maintenance', 'chore'] }\n  ],\n  \n  // Benachrichtigungen\n  send_notifications: true,\n  notification_channels: ['slack', 'email'],\n  slack_webhook_url: 'https://hooks.slack.com/services/YOUR_SLACK_WEBHOOK',\n  notification_recipients: [\n    'team@example.com',\n    '#releases-channel'\n  ]\n};"
      },
      "id": "0a9fb0c4-48a3-438c-82f3-c9c9fa76ab4d",
      "name": "Config: Release Management",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        660
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Config: Release Management\"].json.gitlab_api_url}}/projects/{{$json.tagData.project_id}}/repository/tags/{{$json.tagData.tag_name}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "PRIVATE-TOKEN",
              "value": "={{$node[\"Config: Release Management\"].json.gitlab_api_token}}"
            }
          ]
        },
        "options": {
          "response": {
            "fullResponse": false
          }
        }
      },
      "id": "dd2c46e9-24bd-4da9-84e9-0c5ded18ed55",
      "name": "Hole Tag Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Config: Release Management\"].json.gitlab_api_url}}/projects/{{$json.milestoneData.project_id}}/milestones/{{$json.milestoneData.milestone_id}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "PRIVATE-TOKEN",
              "value": "={{$node[\"Config: Release Management\"].json.gitlab_api_token}}"
            }
          ]
        },
        "options": {
          "response": {
            "fullResponse": false
          }
        }
      },
      "id": "d33f4a12-e935-41bf-bd99-8fd87b2b82e9",
      "name": "Hole Milestone Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        900,
        460
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Config: Release Management\"].json.gitlab_api_url}}/projects/{{$json.project_id}}/merge_requests?milestone={{$json.title}}&state=merged",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "PRIVATE-TOKEN",
              "value": "={{$node[\"Config: Release Management\"].json.gitlab_api_token}}"
            }
          ]
        },
        "options": {
          "response": {
            "fullResponse": false
          }
        }
      },
      "id": "e1a0efbe-db47-409f-bcb3-cc3172d3b493",
      "name": "Hole Merge Requests f√ºr Milestone",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1120,
        460
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Config: Release Management\"].json.gitlab_api_url}}/projects/{{$json.project_id}}/issues?milestone={{$json.title}}&state=closed",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "PRIVATE-TOKEN",
              "value": "={{$node[\"Config: Release Management\"].json.gitlab_api_token}}"
            }
          ]
        },
        "options": {
          "response": {
            "fullResponse": false
          }
        }
      },
      "id": "da0fd14c-f8a8-4af7-a4b5-7bddf4972d79",
      "name": "Hole Issues f√ºr Milestone",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1340,
        460
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Config: Release Management\"].json.gitlab_api_url}}/projects/{{$json.project_id}}/repository/commits?ref_name={{$json.tag_name}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "PRIVATE-TOKEN",
              "value": "={{$node[\"Config: Release Management\"].json.gitlab_api_token}}"
            }
          ]
        },
        "options": {
          "response": {
            "fullResponse": false
          }
        }
      },
      "id": "2cf6dbf8-0af9-4e0a-b36c-c7532a654c4c",
      "name": "Hole Commits f√ºr Tag",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$node[\"Config: Release Management\"].json.gitlab_api_url}}/projects/{{$json.project_id}}/merge_requests?scope=all",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "PRIVATE-TOKEN",
              "value": "={{$node[\"Config: Release Management\"].json.gitlab_api_token}}"
            }
          ]
        },
        "options": {
          "response": {
            "fullResponse": false
          }
