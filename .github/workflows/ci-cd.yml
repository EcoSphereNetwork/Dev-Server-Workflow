name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy
          pip install -r requirements.txt

      - name: Lint Python code
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          mypy src/

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Run Python tests
        run: |
          pytest --cov=src tests/

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/bake-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          files: |
            docker-compose.yml
            docker-compose.production.yml
          targets: |
            mcp-hub
            docker-mcp
            n8n-mcp
            prompt-mcp
            llm-cost-analyzer-mcp
            openhands-mcp
            frontend

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

      - name: Build Electron app
        if: github.event_name != 'pull_request'
        run: |
          cd frontend
          npm run electron:build

      - name: Upload Electron build artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: electron-build
          path: |
            frontend/dist_electron/*.AppImage
            frontend/dist_electron/*.dmg
            frontend/dist_electron/*.exe

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

      - name: Deploy to staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/staging
            docker-compose down
            git pull
            docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d
            echo "Deployment to staging completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/production
            docker-compose down
            git pull
            docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d
            echo "Deployment to production completed"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Electron build artifacts
        uses: actions/download-artifact@v3
        with:
          name: electron-build
          path: electron-build

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
          files: |
            electron-build/*.AppImage
            electron-build/*.dmg
            electron-build/*.exe
          draft: false
          prerelease: false